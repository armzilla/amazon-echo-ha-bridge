{"name":"Amazon Echo Bridge","tagline":"Emulates a Philips Hue bridge to allow the Amazon Echo to integrate seamlessly into various home automation systems.","body":"![codeship status](https://codeship.com/projects/998e16f0-ca03-0132-6689-76c03995407a/status?branch=master)\r\n\r\nAmazon Echo Bridge allows you to quickly emulate a Phillips Hue bridge, bringing the ability to seamlessly integrate an Amazon Echo into various home automation systems.  \r\n\r\nAlso, with an easy to use POST/PUT REST API, it's never been easier before to get your devices up and running with the Amazon Echo with your own embedded applications!\r\n\r\n## Quick Start\r\n\r\nThere are currently three different ways to run the pre-built jar file:\r\n\r\n**Java -** ```java -jar amazon-echo-bridge-*.jar```\r\n\r\n**Maven -** ```mvn spring-boot:run```\r\n\r\n**Docker -** ```docker build -t amazon-echo-ha-bridge .\r\ndocker run -ti --rm --net=host amazon-echo-ha-bridge```\r\n\r\n Additionally, it's also recommended you pass the command line arguments ```--upnp.config.address``` and ```--server.port``` to override the hardcoded values currently implemented.\r\n\r\n**Examples:**\r\n```--upnp.config.address=192.168.1.240 --server.port=8081```\r\n\r\nAfter the application is started and running, you can access the configurator by accessing http://YOURIP:PORT/configurator.html. \r\n\r\nInput your devices using the form at the bottom of the page, add command URLs to parse (useful if you use a system like OpenHAB), and save.\r\n\r\nInstruct your Amazon Echo to take control of your devices by saying \"Alexa, discover my devices\" and your all set!\r\n\r\n\r\n## Build\r\n\r\nIn case you would like to internally configure your own build of the Amazon Echo Bridge, a few requisites are required.\r\n\r\n### Install Maven: \r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **Ubuntu/Linux** - ```sudo apt-get install maven```\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \r\n**OS X** - Install [Homebrew](http://brew.sh/) and run ```brew install maven```\r\n\r\n### Make Changes:\r\nFor instance, the server defaults to running on port 8080. If you're already running a server (like openHAB) on 8080, you could edit ```server.port``` in ```src/main/resources/application.properties``` to your desired port before building the jar. \r\n\r\nAlternatively you could also pass in a command line argument to override ```server.port```.\r\n\r\n### Compile:\r\nTo build the jar file yourself, make your changes and simply run Maven like this:\r\n```\r\nmvn install\r\n```\r\n\r\nThen locate the jar and start the server using the instructions above.\r\n\r\n## POST/PUT REST API\r\n\r\nAlong with registering devices via the Configurator page, you can also push device information via REST to the Amazon Echo Bridge like so:\r\n```\r\nPOST http://host:port/api/devices\r\n{\r\n\"name\" : \"bedroom light\",\r\n\"deviceType\" : \"switch\",\r\n  \"onUrl\" : \"http://192.168.1.201:3480/data_request?id=action&output_format=json&serviceId=urn:upnp-org:serviceId:SwitchPower1&action=SetTarget&newTargetValue=1&DeviceNum=41\",\r\n  \"offUrl\" : \"http://192.168.1.201:3480/data_request?id=action&output_format=json&serviceId=urn:upnp-org:serviceId:SwitchPower1&action=SetTarget&newTargetValue=0&DeviceNum=41\"\r\n}\r\n```\r\n\r\nDimming is also supported by using the expression ```${intensity.percent}``` with a value of 0-100 or ```${intensity.byte}``` with a value 0-255, respectively.\r\n\r\n**Example:**\r\n\r\n```\r\n{\r\n    \"name\": \"entry light\",\r\n    \"deviceType\": \"switch\",\r\n    \"offUrl\": \"http://192.168.1.201:3480/data_request?id=action&output_format=json&serviceId=urn:upnp-org:serviceId:SwitchPower1&action=SetTarget&newTargetValue=0&DeviceNum=31\",\r\n    \"onUrl\": \"http://192.168.1.201:3480/data_request?id=action&output_format=json&DeviceNum=31&serviceId=urn:upnp-org:serviceId:Dimming1&action=SetLoadLevelTarget&newLoadlevelTarget=${intensity.percent}\"\r\n}\r\n```\r\n\r\nYou can also push additional optional fields, such as:\r\n\r\n * contentType, which currently isn't validated\r\n\r\n * httpVerb, Only POST/PUT/GET supported\r\n\r\n * contentBody: Your POST/PUT body\r\n\r\nLike so:\r\n```\r\n{\r\n    \"name\": \"test device\",\r\n    \"deviceType\": \"switch\",\r\n    \"offUrl\": \"http://192.168.1.201:3480/data_request?id=action&output_format=json&serviceId=urn:upnp-org:serviceId:SwitchPower1&action=SetTarget&newTargetValue=0&DeviceNum=31\",\r\n    \"onUrl\": \"http://192.168.1.201:3480/data_request?id=action&output_format=json&DeviceNum=31&serviceId=urn:upnp-org:serviceId:Dimming1&action=SetLoadLevelTarget&newLoadlevelTarget=${intensity.percent}\",\r\n  \"contentType\" : \"application/json\",\r\n  \"httpVerb\":\"POST\",\r\n  \"contentBody\" : \"{\\\"fooBar\\\":\\\"baz\\\"}\"\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}